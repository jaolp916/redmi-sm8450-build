name: Build Redmi SM8450 (vendor/dtb/dtbo)
on:
  workflow_dispatch:
    inputs:
      device:
        description: "设备代号（默认Redmi K50 Ultra：rubens）"
        required: true
        default: "rubens"
        type: string
      build_type:
        description: "编译类型（userdebug足够）"
        required: true
        default: "userdebug"
        type: choice
        options:
          - user
          - userdebug
          - eng

jobs:
  build_core_components:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo configs
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Clean disk space (critical!)
        run: |
          echo "=== Initial Disk Usage ==="
          df -h
          du -sh /* | sort -rh | head -10

          # 删除超大无用目录
          sudo rm -rf /var/lib/docker /usr/local/lib/android /usr/share/dotnet /opt/ghc /usr/local/share/boost
          sudo rm -rf /var/cache/apt/archives /var/log/* /tmp/* ~/.cache
          
          sudo apt clean
          sudo apt autoremove -y --purge
          sudo apt remove -y $(dpkg --list | grep '^ii' | grep -E 'docker|jdk8|python2' | awk '{print $2}')

          echo -e "\n=== Disk Usage After Cleanup ==="
          df -h /mnt

      - name: Install minimal dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            git git-lfs curl repo \
            bc bison build-essential ccache flex \
            g++-multilib gcc-multilib \
            lib32ncurses5-dev lib32readline-dev lib32z1-dev \
            libelf-dev liblz4-tool libncurses5-dev zlib1g-dev \
            openjdk-17-jdk-headless

          sudo apt remove -y repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/

      - name: Sync minimal source code
        run: |
          # 关键修复：使用sudo创建目录并设置权限
          sudo mkdir -p /mnt/android/redmi
          sudo chown -R $USER:$USER /mnt/android  # 赋予当前用户完全权限
          cd /mnt/android/redmi

          # 初始化Repo
          repo init \
            -u https://github.com/LineageOS/android.git \
            -b lineage-20.0 \
            --depth=1 \
            --filter=blob:none \
            --no-clone-bundle

          # 复制manifest文件
          MANIFEST_PATH=$(find $GITHUB_WORKSPACE -name "redmi-sm8450.xml" | head -n1)
          if [ -z "$MANIFEST_PATH" ]; then
            echo "❌ Error: redmi-sm8450.xml not found!"
            exit 1
          fi
          mkdir -p .repo/local_manifests && cp "$MANIFEST_PATH" .repo/local_manifests/

          # 同步源码
          echo -e "\n=== Syncing Core Repos ==="
          repo sync -c -j2 --no-tags --force-sync

          echo -e "\n=== Disk Usage After Sync ==="
          df -h /mnt

      - name: Build target components
        run: |
          cd /mnt/android/redmi
          export USE_CCACHE=0
          export CCACHE_EXEC=$(which ccache)
          [ "$USE_CCACHE" = "1" ] && ccache -M 10G

          source build/envsetup.sh
          lunch ${{ github.event.inputs.device }}-${{ github.event.inputs.build_type }}

          # 编译组件
          echo -e "\n=== Building vendor.img ==="
          make vendorimage -j$(nproc --all)
          
          echo -e "\n=== Building vendor_dlkm.img ==="
          make vendor_dlkmimage -j$(nproc --all)
          
          echo -e "\n=== Building dtb + dtbo ==="
          make dtb dtboimg -j$(nproc --all)

          # 验证产物
          REQUIRED_FILES=(
            "out/target/product/${{ github.event.inputs.device }}/vendor.img"
            "out/target/product/${{ github.event.inputs.device }}/vendor_dlkm.img"
            "out/target/product/${{ github.event.inputs.device }}/dtb.img"
            "out/target/product/${{ github.event.inputs.device }}/dtbo.img"
          )
          for file in "${REQUIRED_FILES[@]}"; do
            [ ! -f "$file" ] && { echo "❌ Error: Missing $file"; exit 1; }
          done

      - name: Collect and upload artifacts
        run: |
          mkdir -p $GITHUB_WORKSPACE/out
          cp /mnt/android/redmi/out/target/product/${{ github.event.inputs.device }}/{vendor.img,vendor_dlkm.img,dtb.img,dtbo.img} $GITHUB_WORKSPACE/out/
          ls -lh $GITHUB_WORKSPACE/out/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: redmi-sm8450-${{ github.event.inputs.device }}-artifacts
          path: $GITHUB_WORKSPACE/out/
          retention-days: 7
    
