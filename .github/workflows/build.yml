name: Build Redmi SM8450 (vendor/dtb/dtbo)
on:
  workflow_dispatch:
    inputs:
      device:
        default: "rubens"
        type: string
      build_type:
        default: "userdebug"
        type: choice
        options: [user, userdebug, eng]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout configs
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 清理磁盘空间
        run: |
          sudo docker system prune -af
          sudo rm -rf /var/lib/docker /var/lib/containerd /usr/local/lib/android /usr/share/dotnet /opt/ghc
          sudo rm -rf /var/cache/apt/archives/* /var/log/* /tmp/* ~/.cache
          sudo apt clean
          sudo apt autoremove -y --purge
          df -h /mnt

      - name: 安装依赖
        run: |
          sudo apt update
          sudo apt install -y git git-lfs curl repo bc bison build-essential ccache flex g++-multilib gcc-multilib lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev zlib1g-dev openjdk-17-jdk-headless
          sudo apt remove -y repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo && chmod a+x ~/repo && sudo mv ~/repo /usr/local/bin/
          repo --version

      - name: 同步精简源码（简化验证）
        run: |
          # 创建目录
          sudo mkdir -p /mnt/android/redmi
          sudo chown -R $USER:$USER /mnt/android
          cd /mnt/android/redmi

          # 初始化Repo
          repo init -u https://github.com/LineageOS/android.git -b lineage-20.0 --depth=1 --no-clone-bundle

          # 复制manifest文件
          mkdir -p .repo/local_manifests
          cp $GITHUB_WORKSPACE/local_manifests/redmi-sm8450.xml .repo/local_manifests/
          cp $GITHUB_WORKSPACE/local_manifests/exclude.xml .repo/local_manifests/

          # 简化验证：只检查并提示不存在的项目，不修改文件
          echo -e "\n=== 检查屏蔽规则 ==="
          # 先获取所有项目列表
          repo list > all_projects.txt
          # 逐行检查exclude.xml中的项目
          while IFS= read -r line; do
            # 提取项目名称（跳过注释和空行）
            if [[ $line =~ name=\"(.*?)\" ]] && ! [[ $line =~ ^[[:space:]]*<!-- ]]; then
              project="${BASH_REMATCH[1]}"
              # 检查项目是否存在
              if ! grep -q "$project" all_projects.txt; then
                echo "⚠️ 忽略不存在的项目: $project"
              else
                echo "✅ 有效屏蔽项目: $project"
              fi
            fi
          done < $GITHUB_WORKSPACE/local_manifests/exclude.xml

          # 同步源码（忽略不存在项目的错误）
          echo -e "\n=== 同步核心仓库 ==="
          repo sync -c -j1 --no-tags --force-sync || echo "部分项目同步失败，继续执行"

          df -h /mnt

      - name: 编译组件
        run: |
          cd /mnt/android/redmi
          export USE_CCACHE=0
          source build/envsetup.sh
          lunch ${{ github.event.inputs.device }}-${{ github.event.inputs.build_type }}
          make vendorimage vendor_dlkmimage dtb dtboimg -j$(nproc --all)

      - name: 收集并上传产物
        run: |
          mkdir -p $GITHUB_WORKSPACE/out
          cp /mnt/android/redmi/out/target/product/${{ github.event.inputs.device }}/*.img $GITHUB_WORKSPACE/out/ || true
          ls -lh $GITHUB_WORKSPACE/out/

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: redmi-artifacts-${{ github.event.inputs.device }}
          path: out/
          retention-days: 7
    
