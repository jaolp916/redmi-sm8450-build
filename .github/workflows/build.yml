name: Build Redmi SM8450 (vendor/dtb/dtbo)
on:
  workflow_dispatch:
    inputs:
      device:
        default: "rubens"
        type: string
      build_type:
        default: "userdebug"
        type: choice
        options: [user, userdebug, eng]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout configs
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 终极磁盘清理（释放40+GB）
        run: |
          # 1. 删除所有容器和镜像（最大空间占用）
          sudo docker system prune -af
          sudo rm -rf /var/lib/docker /var/lib/containerd

          # 2. 删除所有预安装开发工具
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc /usr/local/share/boost
          sudo rm -rf /usr/lib/jvm /usr/local/jvm  # 多余JDK

          # 3. 清理系统缓存和日志
          sudo rm -rf /var/cache/apt/archives/* /var/log/* /tmp/* ~/.cache
          sudo apt clean
          sudo apt autoremove -y --purge

          # 4. 验证空间（确保/mnt剩余>100GB）
          echo "=== 清理后空间 ==="
          df -h /mnt

      - name: 安装依赖和最新repo
        run: |
          sudo apt update
          sudo apt install -y git git-lfs curl repo bc bison build-essential ccache flex g++-multilib gcc-multilib lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev zlib1g-dev openjdk-17-jdk-headless
          sudo apt remove -y repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo && chmod a+x ~/repo && sudo mv ~/repo /usr/local/bin/
          repo --version

      - name: 同步精简源码（带屏蔽规则）
        run: |
          # 创建目录并授权
          sudo mkdir -p /mnt/android/redmi
          sudo chown -R $USER:$USER /mnt/android
          cd /mnt/android/redmi

          # 初始化Repo（仅LineageOS核心）
          repo init -u https://github.com/LineageOS/android.git -b lineage-20.0 --depth=1 --no-clone-bundle

          # 复制设备manifest和屏蔽规则（关键）
          mkdir -p .repo/local_manifests
          cp $GITHUB_WORKSPACE/local_manifests/redmi-sm8450.xml .repo/local_manifests/
          cp $GITHUB_WORKSPACE/local_manifests/exclude.xml .repo/local_manifests/  # 添加屏蔽规则

          # 关键：验证屏蔽规则中的项目是否存在
          echo -e "\n=== 验证屏蔽规则 ==="
          while read -r line; do
          # 提取项目名称（排除注释和空行）
          project=$(echo "$line" | grep -oP 'name="\K[^"]+' | grep -v '^$')
          if [ -n "$project" ]; then
          # 检查项目是否存在于主manifest
          if ! repo list | grep -q "$project"; then
          echo "⚠️ 移除不存在的项目: $project"
          # 从exclude.xml中删除无效条目
          sed -i "/name=\"$project\"/d" .repo/local_manifests/exclude.xml
           fi
          fi
          done < $GITHUB_WORKSPACE/local_manifests/exclude.xml

          # 同步源码（最低并行度）
          echo -e "\n=== 同步核心仓库 ==="
          repo sync -c -j1 --no-tags --force-sync  # 用-j1进一步减少IO压力

          # 同步后空间检查
          echo -e "\n=== 同步后空间 ==="
          df -h /mnt

      - name: 编译目标组件
        run: |
          cd /mnt/android/redmi
          export USE_CCACHE=0  # 禁用缓存节省空间
          source build/envsetup.sh
          lunch ${{ github.event.inputs.device }}-${{ github.event.inputs.build_type }}

          # 编译必需组件
          make vendorimage vendor_dlkmimage dtb dtboimg -j$(nproc --all)

          # 验证产物
          for file in vendor.img vendor_dlkm.img dtb.img dtbo.img; do
            [ ! -f "out/target/product/${{ github.event.inputs.device }}/$file" ] && { echo "❌ 缺失$file"; exit 1; }
          done

      - name: 收集并上传产物
        run: |
          mkdir -p $GITHUB_WORKSPACE/out
          cp /mnt/android/redmi/out/target/product/${{ github.event.inputs.device }}/*.img $GITHUB_WORKSPACE/out/
          ls -lh $GITHUB_WORKSPACE/out/

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: redmi-artifacts-${{ github.event.inputs.device }}
          path: out/
          retention-days: 7
