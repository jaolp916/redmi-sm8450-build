name: 编译
on:
  workflow_dispatch:
    inputs:
      device:
        default: "rubens"
        type: string
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 拉取仓库代码（含你的补丁和脚本）
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 安全清理磁盘空间
        run: |
          set -euo pipefail
          sudo rm -rf /var/lib/docker /usr/local/lib/android /usr/share/dotnet /opt/ghc
          sudo rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/* /var/log/* /tmp/* ~/.cache
          sudo apt clean && sudo apt autoremove -y --purge
          df -h /mnt

      - name: 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y \
            git wget curl unzip gcc-aarch64-linux-gnu make bc bison flex libssl-dev \
            device-tree-compiler cpio openssl liblz4-tool zstd

      - name: 初始化编译目录
        run: |
          sudo mkdir -p /mnt/build
          sudo chown -R $USER:$USER /mnt/build

      - name: 获取内核源码（匹配lineage-23.0）
        run: |
          mkdir -p /mnt/build/kernel && cd /mnt/build/kernel
          # 关键：内核也使用lineage-23.0分支，与设备仓库匹配
          git clone --depth=1 -b lineage-23.0 \
          https://github.com/LineageOS/android_kernel_xiaomi_sm8450.git . || {
          echo "❌ 内核分支克隆失败"
          exit 1
          }
    

      - name: 获取设备树（lineage-23.0完整克隆）
        run: |
          mkdir -p /mnt/build/device/xiaomi/diting && cd /mnt/build/device/xiaomi/diting
    
          # 关键1：强制克隆lineage-23.0分支
          echo "=== 克隆lineage-23.0分支的diting设备仓库 ==="
          git clone --depth=1 -b lineage-23.0 \
          https://github.com/LineageOS/android_device_xiaomi_diting.git . || {
          echo "❌ 分支克隆失败，尝试官方镜像"
          git clone --depth=1 -b lineage-23.0 \
          https://mirrorbits.lineageos.org/git/device/xiaomi/diting.git .
          }
    
          # 关键2：初始化子模块（解决依赖的sm8450-common等通用配置）
          if [ -f ".gitmodules" ]; then
          echo "=== 初始化子模块 ==="
          git submodule update --init --recursive || {
          echo "⚠️ 子模块初始化失败，尝试手动克隆依赖"
          # 手动克隆sm8450-common（diting的父级通用配置）
          mkdir -p ../../sm8450-common && cd ../../sm8450-common
          git clone --depth=1 -b lineage-23.0 \
          https://github.com/LineageOS/android_device_xiaomi_sm8450-common.git .
          cd ../diting  # 返回diting目录
          }
          fi
    
          # 验证核心文件是否存在
          echo "=== 验证设备仓库文件 ==="
          ls -la properties/  # 检查properties目录是否存在且有内容
          [ -f "BoardConfig.mk" ] && echo "✅ 找到BoardConfig.mk" || echo "❌ 缺失BoardConfig.mk"

      - name: 克隆sm8450-common通用设备树（关键依赖）
        run: |
          # 创建通用设备树目录（与diting设备仓库同级）
          mkdir -p /mnt/build/device/xiaomi/sm8450-common && cd /mnt/build/device/xiaomi/sm8450-common
    
          # 克隆lineage-23.0分支（必须与diting仓库分支一致）
          echo "=== 克隆sm8450-common通用设备树 ==="
          git clone --depth=1 -b lineage-23.0 \
          https://github.com/LineageOS/android_device_xiaomi_sm8450-common.git . || {
          echo "❌ 通用设备树克隆失败，尝试镜像源"
          git clone --depth=1 -b lineage-23.0 \
          https://mirrorbits.lineageos.org/git/device/xiaomi/sm8450-common.git .
          }
    
          # 验证通用仓库核心文件
          echo "=== 验证通用设备树文件 ==="
          [ -f "BoardConfigCommon.mk" ] && echo "✅ 找到通用配置文件" || echo "❌ 缺失通用配置"
          ls -la properties/  # 检查是否包含通用属性文件

    

      - name: 获取厂商库（修正：diting厂商库→正确目录）
        run: |
          # 关键修复2：厂商库目录改为 /mnt/build/vendor/xiaomi/diting（符合Android规范）
          mkdir -p /mnt/build/vendor/xiaomi/diting && cd /mnt/build/vendor/xiaomi/diting
          # 方案1：拉取diting官方厂商库
          if wget -q --spider "https://github.com/TheMuppets/proprietary_vendor_xiaomi_diting.git"; then
            git clone --depth=1 https://github.com/TheMuppets/proprietary_vendor_xiaomi_diting.git -b lineage-23.0 .
          # 方案2：直接下载tar包
          elif wget -q "https://mirror.example.com/vendor-diting.tar.gz"; then
            tar -zxf vendor-diting.tar.gz --strip-components=1
          # 方案3：使用本地厂商库（仓库根目录/vendor-diting-src/）
          elif [ -d "$GITHUB_WORKSPACE/vendor-diting-src" ]; then
            cp -r "$GITHUB_WORKSPACE/vendor-diting-src"/* .
          else
            echo "❌ 设备厂商库获取失败！请手动上传到vendor-diting-src/"
            exit 1
          fi

      - name: 直接修改所有配置（跳过补丁）
        run: |
          # 定义仓库路径
          DEVICE_DIR="/mnt/build/device/xiaomi/diting"
          COMMON_DIR="/mnt/build/device/xiaomi/sm8450-common"
    
          # --------------------------
          # 1. 显示配置修改（120Hz刷新率）
          # --------------------------
          echo "=== 配置显示参数 ==="
          display_props=(
          "$DEVICE_DIR/properties/system.prop"
          "$COMMON_DIR/properties/system.prop"
          "$DEVICE_DIR/system.prop"  # 可能的路径2
          "$COMMON_DIR/system.prop"  # 可能的路径2
          )
          for prop_file in "${display_props[@]}"; do
          mkdir -p "$(dirname "$prop_file")" && touch "$prop_file"
          # 设置刷新率
          [ $(grep -c "^ro.sf.refresh_rate=" "$prop_file") -eq 0 ] && \
          echo "ro.sf.refresh_rate=120" >> "$prop_file" || \
          sed -i "s/^ro.sf.refresh_rate=.*/ro.sf.refresh_rate=120/" "$prop_file"
          # 厂商显示框架配置
          [ $(grep -c "^persist.vendor.display.hz=" "$prop_file") -eq 0 ] && \
          echo "persist.vendor.display.hz=120" >> "$prop_file" || \
          sed -i "s/^persist.vendor.display.hz=.*/persist.vendor.display.hz=120/" "$prop_file"
          done
    
          # --------------------------
          # 2. 电池容量解锁（5000mAh）
          # --------------------------
          echo "=== 配置电池参数 ==="
          battery_props=(
          "$DEVICE_DIR/properties/vendor.prop"
          "$COMMON_DIR/properties/vendor.prop"
          "$DEVICE_DIR/vendor.prop"  # 可能的路径2
          "$COMMON_DIR/vendor.prop"  # 可能的路径2
          )
          for prop_file in "${battery_props[@]}"; do
          mkdir -p "$(dirname "$prop_file")" && touch "$prop_file"
          # 报告电池容量
          [ $(grep -c "^vendor.battery.reported_capacity=" "$prop_file") -eq 0 ] && \
          echo "vendor.battery.reported_capacity=5000" >> "$prop_file" || \
          sed -i "s/^vendor.battery.reported_capacity=.*/vendor.battery.reported_capacity=5000/" "$prop_file"
          # 满电容量限制
          [ $(grep -c "^vendor.battery.full_capacity=" "$prop_file") -eq 0 ] && \
          echo "vendor.battery.full_capacity=5000" >> "$prop_file" || \
          sed -i "s/^vendor.battery.full_capacity=.*/vendor.battery.full_capacity=5000/" "$prop_file"
          done
    
          # --------------------------
          # 3. 系统分区解锁（可读写）
          # --------------------------
          echo "=== 配置系统分区 ==="
          fstab_files=(
          "$DEVICE_DIR/rootdir/etc/fstab.qcom"
          "$COMMON_DIR/rootdir/etc/fstab.qcom"
          "$DEVICE_DIR/fstab.qcom"  # 可能的路径2
          )
          for fstab in "${fstab_files[@]}"; do
          if [ -f "$fstab" ]; then
          # 将/sys分区的ro（只读）改为rw（可读写）
          sed -i "s|/dev/block/bootdevice/by-name/sys.*ext4.*ro,|/dev/block/bootdevice/by-name/sys       /sys            ext4    rw,|g" "$fstab"
          echo "✅ 已修改 $fstab 的系统分区配置"
          else
          echo "⚠️ 未找到 $fstab，跳过"
          fi
          done
    
          # --------------------------
          # 验证所有配置
          # --------------------------
          echo "=== 验证显示配置 ==="
          grep -r "ro.sf.refresh_rate=120" "$DEVICE_DIR" "$COMMON_DIR"
    
          echo "=== 验证电池配置 ==="
          grep -r "vendor.battery.reported_capacity=5000" "$DEVICE_DIR" "$COMMON_DIR"
    
          echo "=== 验证分区配置 ==="
          grep -r "/sys.*ext4.*rw," "$DEVICE_DIR" "$COMMON_DIR"



      - name: 编译内核和镜像（修正：使用diting配置）
        run: |
          cd /mnt/build/kernel
          # 关键修复4：优先使用diting专属配置，其次用SM8450通用配置
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- vendor/diting_defconfig || \
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- vendor/sm8450_defconfig
          # 编译设备树和镜像（-j2适配GitHub Runner性能）
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j2 dtbs dtbo.img

          # 整理输出产物
          mkdir -p /mnt/build/out
          cp arch/arm64/boot/dtb /mnt/build/out/dtb.img 2>/dev/null || true
          cp arch/arm64/boot/dtbo.img /mnt/build/out/ 2>/dev/null || true

          # 打包vendor镜像（修正：使用diting厂商库目录）
          mkdir -p /mnt/build/vendor_img/{vendor,system}
          cp -r /mnt/build/vendor/xiaomi/diting/* /mnt/build/vendor_img/vendor/ 2>/dev/null || true
          cp -r /mnt/build/vendor/xiaomi/sm8450-common/* /mnt/build/vendor_img/vendor/ 2>/dev/null || true
          
          # 计算vendor镜像大小（预留2G空间）
          VENDOR_SIZE=$(du -sh /mnt/build/vendor_img | awk '{print $1}' | sed 's/G//; s/\..*//')
          VENDOR_SIZE=$(( VENDOR_SIZE + 2 ))
          dd if=/dev/zero of=/mnt/build/out/vendor.img bs=1G count=$VENDOR_SIZE
          mkfs.ext4 -F /mnt/build/out/vendor.img
          sudo mount /mnt/build/out/vendor.img /mnt/build/vendor_img/system 2>/dev/null || true
          sudo cp -r /mnt/build/vendor_img/vendor/* /mnt/build/vendor_img/system/ 2>/dev/null || true
          sudo umount /mnt/build/vendor_img/system 2>/dev/null || true

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: final-artifacts-${{ github.event.inputs.device }}
          path: /mnt/build/out/
          retention-days: 14
