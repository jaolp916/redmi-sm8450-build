name: 编译
on:
  workflow_dispatch:
    inputs:
      device:
        default: "rubens"
        type: string
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 拉取仓库代码（含你的补丁和脚本）
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 安全清理磁盘空间
        run: |
          set -euo pipefail
          sudo rm -rf /var/lib/docker /usr/local/lib/android /usr/share/dotnet /opt/ghc
          sudo rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/* /var/log/* /tmp/* ~/.cache
          sudo apt clean && sudo apt autoremove -y --purge
          df -h /mnt

      - name: 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y \
            git wget curl unzip gcc-aarch64-linux-gnu make bc bison flex libssl-dev \
            device-tree-compiler cpio openssl liblz4-tool zstd

      - name: 初始化编译目录
        run: |
          sudo mkdir -p /mnt/build
          sudo chown -R $USER:$USER /mnt/build

      - name: 获取内核源码（匹配lineage-23.0）
        run: |
          mkdir -p /mnt/build/kernel && cd /mnt/build/kernel
          # 关键：内核也使用lineage-23.0分支，与设备仓库匹配
          git clone --depth=1 -b lineage-23.0 \
          https://github.com/LineageOS/android_kernel_xiaomi_sm8450.git . || {
          echo "❌ 内核分支克隆失败"
          exit 1
          }
    

      - name: 获取设备树（lineage-23.0完整克隆）
        run: |
          mkdir -p /mnt/build/device/xiaomi/diting && cd /mnt/build/device/xiaomi/diting
    
          # 关键1：强制克隆lineage-23.0分支
          echo "=== 克隆lineage-23.0分支的diting设备仓库 ==="
          git clone --depth=1 -b lineage-23.0 \
          https://github.com/LineageOS/android_device_xiaomi_diting.git . || {
          echo "❌ 分支克隆失败，尝试官方镜像"
          git clone --depth=1 -b lineage-23.0 \
          https://mirrorbits.lineageos.org/git/device/xiaomi/diting.git .
          }
    
          # 关键2：初始化子模块（解决依赖的sm8450-common等通用配置）
          if [ -f ".gitmodules" ]; then
          echo "=== 初始化子模块 ==="
          git submodule update --init --recursive || {
          echo "⚠️ 子模块初始化失败，尝试手动克隆依赖"
          # 手动克隆sm8450-common（diting的父级通用配置）
          mkdir -p ../../sm8450-common && cd ../../sm8450-common
          git clone --depth=1 -b lineage-23.0 \
          https://github.com/LineageOS/android_device_xiaomi_sm8450-common.git .
          cd ../diting  # 返回diting目录
          }
          fi
    
          # 验证核心文件是否存在
          echo "=== 验证设备仓库文件 ==="
          ls -la properties/  # 检查properties目录是否存在且有内容
          [ -f "BoardConfig.mk" ] && echo "✅ 找到BoardConfig.mk" || echo "❌ 缺失BoardConfig.mk"

      - name: 克隆sm8450-common通用设备树（关键依赖）
        run: |
          # 创建通用设备树目录（与diting设备仓库同级）
          mkdir -p /mnt/build/device/xiaomi/sm8450-common && cd /mnt/build/device/xiaomi/sm8450-common
    
          # 克隆lineage-23.0分支（必须与diting仓库分支一致）
          echo "=== 克隆sm8450-common通用设备树 ==="
          git clone --depth=1 -b lineage-23.0 \
          https://github.com/LineageOS/android_device_xiaomi_sm8450-common.git . || {
          echo "❌ 通用设备树克隆失败，尝试镜像源"
          git clone --depth=1 -b lineage-23.0 \
          https://mirrorbits.lineageos.org/git/device/xiaomi/sm8450-common.git .
          }
    
          # 验证通用仓库核心文件
          echo "=== 验证通用设备树文件 ==="
          [ -f "BoardConfigCommon.mk" ] && echo "✅ 找到通用配置文件" || echo "❌ 缺失通用配置"
          ls -la properties/  # 检查是否包含通用属性文件

    

      - name: 获取厂商库（修正：diting厂商库→正确目录）
        run: |
          # 关键修复2：厂商库目录改为 /mnt/build/vendor/xiaomi/diting（符合Android规范）
          mkdir -p /mnt/build/vendor/xiaomi/diting && cd /mnt/build/vendor/xiaomi/diting
          # 方案1：拉取diting官方厂商库
          if wget -q --spider "https://github.com/TheMuppets/proprietary_vendor_xiaomi_diting.git"; then
            git clone --depth=1 https://github.com/TheMuppets/proprietary_vendor_xiaomi_diting.git -b lineage-23.0 .
          # 方案2：直接下载tar包
          elif wget -q "https://mirror.example.com/vendor-diting.tar.gz"; then
            tar -zxf vendor-diting.tar.gz --strip-components=1
          # 方案3：使用本地厂商库（仓库根目录/vendor-diting-src/）
          elif [ -d "$GITHUB_WORKSPACE/vendor-diting-src" ]; then
            cp -r "$GITHUB_WORKSPACE/vendor-diting-src"/* .
          else
            echo "❌ 设备厂商库获取失败！请手动上传到vendor-diting-src/"
            exit 1
          fi

      


      - name: 编译内核和镜像（适配GKI配置）
        run: |
          cd /mnt/build/kernel
          # 定义GKI基础配置和厂商配置（根据实际文件调整）
          GKI_BASE_CONFIG="arch/arm64/configs/gki_defconfig"  # GKI通用基础配置
          VENDOR_CONFIGS=(
          "arch/arm64/configs/vendor/diting_GKI.config"     # 优先：diting专属GKI配置
          "arch/arm64/configs/vendor/xiaomi_GKI.config"     # 其次：小米通用GKI配置
          )

          # 1. 验证GKI基础配置是否存在
          if [ ! -f "$GKI_BASE_CONFIG" ]; then
          echo "❌ 未找到GKI基础配置：$GKI_BASE_CONFIG"
          # 尝试搜索其他可能的GKI基础配置
          GKI_BASE_CONFIG=$(find arch/arm64/configs/ -name "*gki*.defconfig" | head -n 1)
          if [ -z "$GKI_BASE_CONFIG" ]; then
          echo "❌ 未找到任何GKI基础配置"
          exit 1
          fi
          echo "⚠️ 使用替代GKI基础配置：$GKI_BASE_CONFIG"
          fi

          # 2. 查找可用的厂商GKI配置
          for vendor_config in "${VENDOR_CONFIGS[@]}"; do
          if [ -f "$vendor_config" ]; then
          echo "=== 找到厂商GKI配置：$vendor_config ==="
          # 3. 结合GKI基础配置和厂商配置（关键步骤）
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- "$(basename "$GKI_BASE_CONFIG")"
          # 应用厂商配置片段（覆盖GKI基础配置中的厂商专属部分）
          cat "$vendor_config" | make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j2 olddefconfig
          # 4. 编译设备树和镜像
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j2 dtbs dtbo.img
          # 5. 输出产物
          mkdir -p /mnt/build/out
          cp arch/arm64/boot/dtb /mnt/build/out/dtb.img 2>/dev/null || true
          cp arch/arm64/boot/dtbo.img /mnt/build/out/ 2>/dev/null || true
          exit 0
          fi
          done

          # 如果未找到厂商GKI配置
          echo "❌ 未找到任何厂商GKI配置！请检查："
          ls arch/arm64/configs/vendor/  # 显示vendor目录下的所有配置
          exit 1

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: final-artifacts-${{ github.event.inputs.device }}
          path: /mnt/build/out/
          retention-days: 14
